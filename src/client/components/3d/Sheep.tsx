/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import {useGLTF} from '@react-three/drei'
import {JSX, useEffect} from "react";
import {useControls} from "leva";
import * as THREE from "three";

type GLTFResult = GLTF & {
    nodes: { Body: THREE.Mesh; Face: THREE.Mesh }
    materials: { White: THREE.MeshStandardMaterial; Brown: THREE.MeshStandardMaterial }
}

export function Sheep(props: JSX.IntrinsicElements['group']) {
    const {nodes, materials} = useGLTF<GLTFResult>('/sheep-01.glb')
    const {skinTone, woolColor,} = useControls('Sheep', {
        skinTone: {
            value: '#a56b3c',

        },
        woolColor: {
            value: '#EEEEEE',
        },

    });

    useEffect(() => {
        if (materials.Brown) {
            materials.Brown.color.set(skinTone);
        }
    }, [skinTone, materials.Brown]);

    useEffect(() => {
        if (materials.White) {
            materials.White.color.set(woolColor);
        }
    }, [woolColor, materials.White]);

    return (
        <group {...props} dispose={null}>
            <mesh
                castShadow
                receiveShadow
                geometry={(nodes.Body as THREE.Mesh).geometry}
                material={materials.White}
                position={[0, -0.144, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={(nodes.Face as THREE.Mesh).geometry}
                material={materials.Brown}
                position={[0, -0.144, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={(nodes.EarRight as THREE.Mesh).geometry}
                material={materials.Brown}
                position={[0, -0.144, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={(nodes.EarLeft as THREE.Mesh).geometry}
                material={materials.Brown}
                position={[0, -0.144, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={(nodes.LegsFront as THREE.Mesh).geometry}
                material={materials.Brown}
                position={[0, -0.144, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={(nodes.LegsRear as THREE.Mesh).geometry}
                material={materials.Brown}
                position={[0, -0.144, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={(nodes.EyeRight as THREE.Mesh).geometry}
                material={materials.Black}
                position={[0, -0.144, 0.006]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={(nodes.EyeLeft as THREE.Mesh).geometry}
                material={materials.Black}
                position={[0, -0.144, 0.007]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={(nodes.EyebrowRight as THREE.Mesh).geometry}
                material={materials.Black}
                position={[0, -0.144, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={(nodes.EyebrowLeft as THREE.Mesh).geometry}
                material={materials.Black}
                position={[0, -0.144, 0]}
            />
        </group>
    )
}

useGLTF.preload('/sheep-01.glb')





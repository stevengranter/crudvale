/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 --transform --types bee1.glb
Files: bee1.glb [4.35MB] > /Users/teeb/repos/crudvale/public/bee1-transformed.glb [289.49KB] (93%)
*/

import * as THREE from 'three'
import React, { useRef, useEffect } from 'react' // Import useRef
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { MotionValue } from 'motion' // Import useFrame // Import SpringValue

type GLTFResult = GLTF & {
    nodes: {
        model: THREE.Mesh
    }
    materials: {
        CustomMaterial: THREE.MeshStandardMaterial
    }
    // Assuming you have GLTFAction defined elsewhere if needed for animations
    animations: any[] // Use a more specific type if you have it
}

interface BeeProps {
    // ref: JSX.IntrinsicElements['group']
    onClick?: () => void
    rotationY: MotionValue<number> // Accept the rotationY spring prop
}

export function Bee(props: BeeProps) {
    const { onClick, rotationY, ...groupProps } = props // Destructure rotationY and other group props
    const { nodes, materials } = useGLTF<GLTFResult>(
        '/bee1-transformed.glb',
    ) as GLTFResult

    useEffect(() => {
        console.log(rotationY)
    }, [rotationY])

    const meshRef = useRef<THREE.Mesh>(null) // Create a ref for the mesh

    // Use useFrame to update the mesh's rotation every frame
    useFrame(() => {
        if (meshRef.current) {
            // Apply the rotationY value to the Y-axis rotation
            // Preserve the initial X and Z rotations
            meshRef.current.rotation.y = rotationY.get()
            meshRef.current.rotation.x = Math.PI / 2 // Maintain original X rotation
            meshRef.current.rotation.z = 0 // Maintain original Z rotation
        }
    })

    return (
        <group {...groupProps} dispose={null}>
            {/* Attach the ref to the mesh */}
            <mesh
                ref={meshRef}
                geometry={nodes.model.geometry}
                material={materials.CustomMaterial}
                // Initial rotation is set here, but will be dynamically updated by useFrame
                rotation={[Math.PI / 2, 0, 0]}
                onClick={onClick} // Apply onClick handler to the mesh
                position={[0, 0, 0]}
                // scale={[1.5, 1.5, 1.5]}
            />
        </group>
    )
}

useGLTF.preload('/bee1-transformed.glb')
